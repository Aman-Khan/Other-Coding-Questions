    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<bool>> visited(n, vector<bool>(m,0));
        queue<pair<pair<int, int>, int>> q;
        int fresh=0;
        for(int row=0; row<n; row++){
            for(int col=0; col<m; col++){
                if(grid[row][col]==1) fresh++; 
                else if(grid[row][col]==2){
                    q.push({{row, col}, 0});
                    visited[row][col]=1;
                }
            }
        }
        int maxTime=0;

        int drow[] = {-1, 0, 1, 0};
        int dcol[] = {0, 1, 0, -1};
        int rotted=0;
        while(!q.empty()){
            auto temp = q.front();
            q.pop();
            int x = temp.first.first;
            int y = temp.first.second;
            int minutes = temp.second; 
            maxTime = max(maxTime, minutes);

            for(int i=0; i<4; i++){
                int nrow = x+drow[i];
                int ncol = y+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !visited[nrow][ncol] && grid[nrow][ncol]==1){
                    q.push({{nrow, ncol}, minutes+1});
                    visited[nrow][ncol]=1;
                    rotted++;
                }
            }
        }
        
        if(rotted!=fresh) return -1;

        return maxTime;
    }
