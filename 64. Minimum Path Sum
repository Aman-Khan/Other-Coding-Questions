    int path(int x, int y, vector<vector<int>>& grid, vector<vector<int>>& dp){
        if(x>=grid.size() || y>=grid[0].size()) return INT_MAX;
        if(x==grid.size()-1 && y==grid[0].size()-1){
            return dp[x][y] = grid[x][y];
        }
        if(dp[x][y]!=-1) return dp[x][y];
        int right = path(x, y+1, grid, dp);
        int left = path(x+1, y, grid, dp);

        return dp[x][y]=min(right, left)+grid[x][y];
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1));

        path(0, 0, grid, dp);

        return dp[0][0];
    }
