 void merge(long long arr[], int s, int e, long long &cnt){
        long long mid = s+(e-s)/2;
        int ln = mid-s+1;
        int rn = e-mid;
        long long larr[ln];
        long long rarr[rn];
        
        for(int i=0; i<ln; i++){
            larr[i]=arr[s+i];
        }
        for(int j=0; j<rn; j++){
            rarr[j]=arr[mid+1+j];
        }
        
        int i=0;
        int j=0;
        int k=s;
        
        while(i<ln && j<rn){
            if(larr[i]<=rarr[j]){
                arr[k]=larr[i];
                i++;
            }
            else{
                cnt+=(ln-i);
                arr[k]=rarr[j];
                j++;
            }
            k++;
        }
        while(i<ln){
            arr[k]=larr[i];
            i++;
            k++;
        }
        while(j<rn){
            arr[k]=rarr[j];
            j++;
            k++;
        }
    }
    
    void mergeSort(long long arr[], int s, int e, long long &cnt){
        if(s<e){
            int mid=s+(e-s)/2;
            mergeSort(arr, s, mid, cnt);
            mergeSort(arr, mid+1, e, cnt);
            merge(arr, s, e, cnt);
        }
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        long long cnt = 0;
        mergeSort(arr, 0, N-1, cnt);
        return cnt;
    }
