    void route(int x, int y, vector<vector<int>> visited, vector<vector<int>> maze, string trt, vector<string> &rt){
        if(x==maze.size()-1 && y==maze.size()-1 && maze[x][y]==1){
            rt.push_back(trt);
            return;
        }
        if(maze[x][y]==0){
            return;
        }
    
        if(x+1<maze.size() && visited[x+1][y]==0){ //Down
            visited[x][y]=1;
            trt.push_back('D');
            route(x+1, y, visited, maze, trt, rt);
            trt.pop_back();
            visited[x][y]=0;
        }
    
        if(y+1<maze.size() && visited[x][y+1]==0){ //Right
            visited[x][y]=1;
            trt.push_back('R');
            route(x, y+1, visited, maze, trt, rt);
            trt.pop_back();
            visited[x][y]=0;
        }
    
        if(x-1>=0 && visited[x-1][y]==0){ //Up
            visited[x][y]=1;
            trt.push_back('U');
            route(x-1, y, visited, maze, trt, rt);
            trt.pop_back();
            visited[x][y]=0;
        }
    
        if(y-1>=0 && visited[x][y-1]==0){ //Left
            visited[x][y]=1;
            trt.push_back('L');
            route(x, y-1, visited, maze, trt, rt);
            trt.pop_back();
            visited[x][y]=0;
        }
    }

    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> rt;
        int x=0;
        int y=0;
        if(m[x][y]==0) return rt;
        string trt="";
        vector<vector<int>> visited(n, vector<int> (n,0));
        route(x, y, visited, m, trt, rt);
        return rt;
        // Your code goes here
    }
