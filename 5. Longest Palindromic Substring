//Using dp
  string longestPalindrome(string s) {
        int size = s.length();
        int freq[size][size];
        memset(freq, 0, sizeof(freq));
        int start=0;
        int maxLen=0;
        // fill(freq[0], freq[0] + size * size, -1); //fill 2D array with single value
        for(int i=0; i<size; i++){
            freq[i][i]=1;
        }
        for(int i=0; i<size-1; i++){
            if(s[i]==s[i+1]){
                freq[i][i+1]=1;
                start=i;
                maxLen=i+1;
            }
        }

        for(int i=2; i<size; i++){
            int p=i;
            for(int j=0; p<size; j++){
                if(s[j]==s[p] && freq[j+1][p-1]==1){
                    freq[j][p]=1;
                    start=j;
                    maxLen=p;
                }
                p++;
            }
        } 
        // for(int i=0; i<size; i++){
        //     for(int j=0; j<size; j++){
        //         cout<<freq[i][j]<<" ";
        //     }
        //     cout<<endl;
        // }
        // cout<<"Length of longest palindrome : "<<maxLen+1;
        string ans="";
        for(int i=start; i<=maxLen; i++){
            ans+=s[i];
        }
        // cout<<ans;
        return ans;
    }
