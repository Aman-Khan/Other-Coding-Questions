    int startingNode(vector<int> nums){
        int pivot=nums[0];
        int i=0;
        int j=nums.size()-1;
        while(i<j){
            int mid=i+(j-i)/2;
            if(nums[mid]>=pivot){
                i=mid+1;
            }
            else{
                j=mid;
            }
        }
        return j;
    }

    int binarySearch(int start, int end, vector<int> nums, int target){
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target) return mid;
            else if(target<nums[mid]){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
        int sNode = startingNode(nums);
        int ans=-1;
        if(nums[sNode]==target) return sNode;
        ans=binarySearch(0, sNode, nums, target);
        if(ans!=-1) return ans;
        else return binarySearch(sNode, nums.size()-1, nums, target);
    }
